\documentclass[a4paper]{article}
\usepackage{Sweave}
\usepackage{fixltx2e}

\usepackage[margin=1.0in]{geometry}

 \DefineVerbatimEnvironment{Sinput}{Verbatim} { frame = lines, fontshape = sl}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{frame=lines, fontshape = sl}

\title{Prime Retrieval Study: Analysis}
\author{Abhilasha Kumar}
<<echo=FALSE>>=
options(width=60)
library(xtable)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(tidyr)
library(sjPlot)
@

<<>>=
sjp.setTheme(base = theme_few())
@
\begin{document}
\SweaveOpts{concordance=TRUE}
 \maketitle

\section{Reading File}

<<>>=
PrimeRetrieval <- read.csv("CompleteYA_Removed.csv", header = TRUE, sep = ",")
PrimeRetrieval <- subset(PrimeRetrieval, PrimeRetrieval$Subject != '10')

##note: Completedata_Removed contains data without 12 low-accuracy items
## Run analysis with CompleteData.csv if we need all 72 items
library(dplyr)

agg_condition <- group_by(PrimeRetrieval, PrimeCondition)%>%
    summarise_each(funs(mean(., na.rm = TRUE)), TargetFirstResp_ACC)

agg_sub_condition <-  group_by(PrimeRetrieval, Subject, PrimeCondition)%>%
    summarise_each(funs(mean(., na.rm = TRUE)), TargetFirstResp_ACC)

agg_sub_condition$Subject <- as.factor(agg_sub_condition$Subject)
agg_sub_condition$PrimeCondition <- as.factor(agg_sub_condition$PrimeCondition)


prime_aov = aov(data = agg_sub_condition, TargetFirstResp_ACC ~ PrimeCondition + 
                                        Error(Subject/PrimeCondition))
summary(prime_aov)

participant_acc = group_by(PrimeRetrieval, Subject) %>%
  summarise_at(vars(TargetFirstResp_ACC, PrimeFirstResp_ACC), mean)

participant_acc$MeanAcc = (participant_acc$TargetFirstResp_ACC + 
                          participant_acc$PrimeFirstResp_ACC)/2

colnames(participant_acc) = c("Subject", "TargetAcc", "PrimeAcc", "MeanAcc")

PrimeRetrieval = merge(PrimeRetrieval, participant_acc[,c(1,3,4)], 
                       by = c("Subject"))
@

\section {Effect of Prime Retrieval}

<<>>=
PrimeRetrieval$PrimeFirstResp_ACC <- as.factor(as.character(PrimeRetrieval$PrimeFirstResp_ACC))
PrimeRetrieval$PrimeFirstResp_ACC = sub("0", "Not Retrieved", PrimeRetrieval$PrimeFirstResp_ACC)
PrimeRetrieval$PrimeFirstResp_ACC = sub("1", "Retrieved", PrimeRetrieval$PrimeFirstResp_ACC)
PrimeRetrieval$PrimeFirstResp_ACC <- as.factor(as.character(PrimeRetrieval$PrimeFirstResp_ACC))

PrimeRetrieval_Correct = subset(PrimeRetrieval, PrimeRetrieval$TargetFirstResp_ACC == "1")

agg_target_correct = dplyr::group_by(PrimeRetrieval, Subject, TargetFirstResp_ACC)%>%
    summarise(n = n())
colnames(agg_target_correct) = c("Subject", "TargetAccuracy", "TargetTrials")

agg_prime_correct = dplyr::group_by(PrimeRetrieval, Subject, 
                                    PrimeFirstResp_ACC)%>%
    summarise(n = n())
colnames(agg_prime_correct) = c("Subject", "PrimeRetrieved", "PrimeTrials")

agg_primeret_alltrials = group_by(PrimeRetrieval, Subject, MeanAcc, PrimeAcc,
                            PrimeFirstResp_ACC, TargetFirstResp_ACC)%>%
    summarise(n = n())
colnames(agg_primeret_alltrials) = c("Subject", "MeanAcc", "PrimeAcc",
                                     "PrimeRetrieved", 
                                     "TargetAccuracy", "Trials")

##ALL TRIALS

merged_agg_primeret_all = merge(agg_target_correct, agg_primeret_alltrials, 
                                by = c("Subject", "TargetAccuracy"))


# NOTE: SUBJECT 20 has an empty cell for Not Retrieved i.e. there were no trials where they correctly retrieved the target but did not correctly retrieve the prime. 
merged_agg_primeret_all[176, ] = c("20","1", "10", "0.3916667", "0.6166667",
                                   "Not Retrieved", 0)
                                   

merged_agg_primeret_all = merge(merged_agg_primeret_all, agg_prime_correct,
                                by = c("Subject", "PrimeRetrieved") )
merged_agg_primeret_all$Trials = as.numeric(as.character(merged_agg_primeret_all$Trials))

merged_agg_primeret_all$TargetTrials = as.numeric(as.character(merged_agg_primeret_all$TargetTrials))

merged_agg_primeret_all$ProportionTarget = merged_agg_primeret_all$Trials/
  merged_agg_primeret_all$TargetTrials

merged_agg_primeret_all$ProportionPrime = merged_agg_primeret_all$Trials/
  merged_agg_primeret_all$PrimeTrials

##CORRECT TRIALS ONLY

# merged_agg_primeret = merge(agg_target_correct, agg_primeret, by = "Subject")
# merged_agg_primeret = subset(merged_agg_primeret, 
#                              merged_agg_primeret$TargetFirstResp_ACC.x == "1")
# merged_agg_primeret = merged_agg_primeret[, -2]
# colnames(merged_agg_primeret) = c("Subject", "CorrectTrials", "PrimeRetrieved", 
#                                   "TargetAcc", "NumCorrect")
# 
# merged_agg_primeret$MeanAccuracy = merged_agg_primeret$NumCorrect/merged_agg_primeret$CorrectTrials


merged_agg_primeret_all$Subject = as.factor(as.character(merged_agg_primeret_all$Subject)) 
merged_agg_primeret_all$TargetAccuracy = as.factor(as.character(merged_agg_primeret_all$TargetAccuracy)) 
merged_agg_primeret_all$MeanAcc = as.numeric(as.character(merged_agg_primeret_all$MeanAcc))


primeret_aov = aov(data = merged_agg_primeret_all, 
                   ProportionPrime ~ TargetAccuracy*PrimeRetrieved + 
                          Error(Subject/(TargetAccuracy*PrimeRetrieved)))

summary(primeret_aov)

### LM with Mean Acc as a covariate

## in agg data: 3 way not sig: IMPORTANT! It is not the case
## that good subjects are driving this pattern

library(lme4)
library(lmerTest)
model_acc = lmer(data = merged_agg_primeret_all, 
                 ProportionPrime ~ TargetAccuracy*PrimeRetrieved*MeanAcc +
                   (1|Subject))
summary(model_acc)

sjPlot::sjp.lmer(model_acc, type = "pred", vars = c("PrimeRetrieved", "TargetAccuracy"), facet.grid = FALSE)

## NOTE: The main effect of Prime Retrieved is significant SPLIT BY TARGET ACC
@

\subsection {Model Acc Plotting}
<<fig=TRUE>>=
fixed.frame <- merged_agg_primeret_all %>% 
  dplyr::summarise(mean = mean(MeanAcc, na.rm = T), 
            sd = sd(MeanAcc, na.rm = T))

fixed.frame <-
  data.frame(
    expand.grid(
      # here, you add values for your time variable and predictors
      TargetAccuracy = c("0","1"),
      PrimeRetrieved = c("Not Retrieved","Retrieved"),
       MeanAcc = c(fixed.frame$mean-fixed.frame$sd,
                     fixed.frame$mean,
                     fixed.frame$mean+fixed.frame$sd))) 

fixed.frame$pred = predict(model_acc, newdata = fixed.frame, re.form = NA)

library(ggplot2)
library(ggthemes)
fixed.frame %>%
mutate(MeanAccuracy = factor(MeanAcc, levels = unique(MeanAcc),
                                 labels = c("-1SD Low performing Subjects", 
                                            "0SD Mean Performing Subjects", 
                                            "1SD High Performing Subjects")),
        TargetAcc = factor(TargetAccuracy, levels = unique(TargetAccuracy),
                           labels = c("Failed Retrieval", 
                                      "Successful Retrieval"))) %>%
  ggplot(aes(x = PrimeRetrieved, y = pred, 
             fill = TargetAcc, group = TargetAcc)) +
 geom_bar(stat = "identity", position = "dodge", color = "black")+
        labs(x = "Prime Retrieval", 
             y = "Proportion of Trials",
         title = "YA: Prime Retrieval by Target Accuracy") +
  facet_wrap(~MeanAccuracy)+
  theme_few()+
  scale_fill_manual(values = c("black", "white"))+
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1), hjust = .5))
@

@


\section {Effect of Prime Retrieved by Prime Condition}

<<>>=
#counting number of correct and incorrect trials per prime condition:
agg_target_correct_primetype = group_by(PrimeRetrieval, Subject, PrimeCondition, 
                                        TargetFirstResp_ACC)%>%
    summarise(n = n())
colnames(agg_target_correct_primetype) = c("Subject", "PrimeCondition",
                                           "TargetAccuracy", "TargetTrials")

agg_prime_correct_primetype = group_by(PrimeRetrieval, Subject, PrimeCondition, 
                                        PrimeFirstResp_ACC)%>%
    summarise(n = n())
colnames(agg_prime_correct_primetype) = c("Subject", "PrimeCondition",
                                           "PrimeRetrieval", "PrimeTrials")

agg_prime_target_primetype = group_by(PrimeRetrieval, Subject, PrimeCondition, 
                                        PrimeFirstResp_ACC, TargetFirstResp_ACC)%>%
    summarise(n = n())
colnames(agg_prime_target_primetype) = c("Subject", "PrimeCondition",
                                           "PrimeRetrieval", "TargetAccuracy",
                                         "SubTrials")
merged_main = merge(agg_prime_correct_primetype,agg_prime_target_primetype,
                    by = c("Subject", "PrimeCondition", "PrimeRetrieval" ))

merged_main$Proportion = merged_main$SubTrials/merged_main$PrimeTrials


## Number of correct target trials ONLY per prime condition are calculated below:
# agg_target_correct_primetype = subset(agg_target_correct_primetype, 
#                                       agg_target_correct_primetype$TargetFirstResp_ACC == "1")

## Note: Subjects 6 and 41 have one missing cell each, we fill it up with 0 trials

agg_target_correct_primetype[351,] = c("6", "P", "1", "0")
agg_target_correct_primetype[352,] = c("41", "R", "1", "0")
## now we have the correct and incorrect trials in each prime condition. 
## We now need these trials split by ret/notret for each prime condition

maindata = group_by(PrimeRetrieval, Subject, PrimeCondition, PrimeFirstResp_ACC,  
                                        TargetFirstResp_ACC)%>%
    summarise(n = n())
colnames(maindata) = c("Subject", "PrimeCondition", "PrimeRetrieval", 
                       "TargetAccuracy", "Trials")

## we merge this with agg_target_correct and agg_prime_correct to get everything in the same df

finaldata = merge(maindata, agg_target_correct_primetype, 
                  by = c("Subject", "PrimeCondition", "TargetAccuracy"))
finaldata = merge(finaldata, agg_prime_correct_primetype, 
                  by = c("Subject", "PrimeCondition", "PrimeRetrieval"))

finaldata$TargetTrials = as.numeric(as.character(finaldata$TargetTrials))
finaldata$ProportionTarget = finaldata$Trials/finaldata$TargetTrials
finaldata$ProportionPrime = finaldata$Trials/finaldata$PrimeTrials


@

<<>>=
## Below, we calculate number of correct trials in Prime Ret/Not by PrimeCondition for each Subject
## NOTE: dply drops missing rows, and we already have this data from earlier code. 
## So we simply load that file

primetype_primeret <- read.csv("agg_primeret_primetype.csv", header = TRUE, sep = ",")

# remove Subject 10

primetype_primeret = subset(primetype_primeret, primetype_primeret$Subject!= "10")

# This data is in wide format. Convert to long:

library(tidyr)
prime_long <- primetype_primeret %>%
  gather(Condition, MeanProportion, R_Retrieved, R_NotRetrieved,
                                    P_Retrieved, P_NotRetrieved,
                                    B_Retrieved, B_NotRetrieved,
                                    U_Retrieved, U_NotRetrieved)
         
#ordered by subject
prime_long <- prime_long[order(prime_long$Subject),]
prime_long = separate(data = prime_long, 
                              Condition, c("PrimeCondition", "PrimeRetrieved"), sep = "_" )

## Note: Subjects 6 and 41 have two missing cells each, we fill it up with mean proportion 
## in that condition

mean_conditions = group_by(prime_long, PrimeCondition, PrimeRetrieved)%>%
    summarise_each(funs(mean(., na.rm = TRUE)), MeanProportion)

prime_long[43,] = c("6", "P", "Retrieved", "0.6219")
prime_long[44,] = c("6", "P", "NotRetrieved", "0.3780")
prime_long[297,] = c("41", "R", "Retrieved", "0.6224")
prime_long[298,] = c("41", "R", "NotRetrieved", "0.3775")

prime_long$Subject <- as.factor(as.character(prime_long$Subject))
prime_long$PrimeRetrieved <- as.factor(as.character(prime_long$PrimeRetrieved))
prime_long$PrimeCondition <- as.factor(as.character(prime_long$PrimeCondition))
prime_long$MeanProportion <- as.numeric(as.character(prime_long$MeanProportion))

main_aov <- aov(data = prime_long, MeanProportion ~ PrimeCondition*PrimeRetrieved + 
                                    Error(Subject/(PrimeCondition*PrimeRetrieved)))
summary(main_aov)

@
\section{Plotting}
\subsection *{Prime Ret/Not by Prime Type}

\subsubsection *{Target Proportions}
<<>>=

library(Rmisc)
agg_finaldata_target = summarySE(finaldata, 
                      measurevar = "Trials",
                      groupvars = c("PrimeCondition", 
                                    "TargetAccuracy","PrimeRetrieval"))

library(ggplot2)
library(ggthemes)
agg_finaldata_target %>% mutate(TargetAccuracy = factor(TargetAccuracy, 
                                                 levels = unique(TargetAccuracy),
                    labels = c("Incorrect Target", "Correct Target")))%>%
  ggplot(aes(x = PrimeCondition, y = Trials, 
                          group = PrimeRetrieval, 
                          fill = PrimeRetrieval)) +  
  geom_bar(stat = "identity", position = "dodge", width = 0.5)+
   geom_errorbar(aes(ymin = Trials - ci, ymax = Trials + ci),
                width=.05, position=position_dodge(.5)) +
  facet_wrap(~TargetAccuracy)+
  theme_few()+
  scale_fill_hc()+
      xlab("PrimeCondition") + ylab("Number of Trials") + 
    ggtitle("Target Trials \n by Prime Condition and Retrieval") 
@

\subsubsection *{Prime Proportions}
<<>>=
library(Rmisc)
agg_finaldata_prime = summarySE(finaldata, 
                      measurevar = "Trials",
                      groupvars = c("PrimeCondition", 
                                    "TargetAccuracy","PrimeRetrieval"))

library(ggplot2)
library(ggthemes)
agg_finaldata_prime %>% mutate(TargetAccuracy = factor(TargetAccuracy, 
                                                 levels = unique(TargetAccuracy),
                    labels = c("Incorrect Target", "Correct Target")))%>%
  ggplot(aes(x = PrimeCondition, y = Trials, 
                          group = TargetAccuracy, 
                          fill = TargetAccuracy)) +  
  geom_bar(stat = "identity", position = "dodge", width = 0.5)+
   geom_errorbar(aes(ymin = Trials - ci, ymax = Trials + ci),
                width=.05, position=position_dodge(.5)) +
  facet_wrap(~PrimeRetrieval)+
  theme_few()+
  scale_fill_wsj()+
      xlab("PrimeCondition") + ylab("Number of Trials") + 
    ggtitle("Target Trials \n by Prime Condition and Retrieval") 
@

\subsubsection*{Merged_Main figure}

<<>>=
library(Rmisc)
agg_mergeddata_prime = summarySE(merged_main, 
                      measurevar = "Proportion",
                      groupvars = c("PrimeCondition", 
                                    "PrimeRetrieval", "TargetAccuracy"))

library(ggplot2)
library(ggthemes)
agg_mergeddata_prime %>% mutate(TargetAccuracy = factor(TargetAccuracy, 
                                                 levels = unique(TargetAccuracy),
                    labels = c("Incorrect Target", "Correct Target")))%>%
  ggplot(aes(x = PrimeCondition, y = Proportion, 
                          group = TargetAccuracy, 
                          fill = TargetAccuracy)) +  
  geom_bar(stat = "identity", position = "dodge", width = 0.5)+
   geom_errorbar(aes(ymin = Proportion - ci, ymax = Proportion + ci),
                width=.05, position=position_dodge(.5)) +
  facet_wrap(~PrimeRetrieval)+
  theme_few()+
  scale_fill_wsj()+
      xlab("PrimeCondition") + ylab("Number of Trials") + 
    ggtitle("Target Trials \n by Prime Condition and Retrieval") 
@

\subsubsection *{How Many Subjects}
<<>>=
### HOW MANY SUBJECTS SHOW THIS EFFECT OF PRIME RETRIEVAL BY PRIME TYPE?

f_primeretrieved = finaldata %>% 
                    filter(PrimeRetrieval == "Retrieved")
f_primenotretrieved = finaldata %>% 
                      filter(PrimeRetrieval == "Not Retrieved")

f_ret_b = f_primeretrieved %>% filter(PrimeCondition == "B")
f_ret_p = f_primeretrieved %>% filter(PrimeCondition == "P")
f_ret_r = f_primeretrieved %>% filter(PrimeCondition == "R")
f_ret_u = f_primeretrieved %>% filter(PrimeCondition == "U")


f_notret_b = f_primenotretrieved %>% filter(PrimeCondition == "B")
f_notret_p = f_primenotretrieved %>% filter(PrimeCondition == "P")
f_notret_r = f_primenotretrieved %>% filter(PrimeCondition == "R")
f_notret_u = f_primenotretrieved %>% filter(PrimeCondition == "U")

ret_main_b = f_ret_b[,c(1,4,5)]
ret_main_p = f_ret_p[,c(1,4,5)]
ret_main_r = f_ret_r[,c(1,4,5)]
ret_main_u = f_ret_u[,c(1,4,5)]

notret_main_b = f_notret_b[,c(1,4,5)]
notret_main_p = f_notret_p[,c(1,4,5)]
notret_main_r = f_notret_r[,c(1,4,5)]
notret_main_u = f_notret_u[,c(1,4,5)]

## converting to wide

## for ret
ret_wide_b = tidyr::spread(ret_main_b, TargetAccuracy, Trials)
sum(ret_wide_b$`1` > ret_wide_b$`0`, na.rm = TRUE)
t.test(ret_wide_b$`1`, ret_wide_b$`0`, paired = TRUE)

ret_wide_p = tidyr::spread(ret_main_p, TargetAccuracy, Trials)
sum(ret_wide_p$`1` > ret_wide_p$`0`, na.rm = TRUE)
t.test(ret_wide_p$`1`, ret_wide_p$`0`, paired = TRUE)

ret_wide_r = tidyr::spread(ret_main_r, TargetAccuracy, Trials)
sum(ret_wide_r$`1` > ret_wide_r$`0`, na.rm = TRUE)
t.test(ret_wide_r$`1`, ret_wide_r$`0`, paired = TRUE)

ret_wide_u = tidyr::spread(ret_main_u, TargetAccuracy, Trials)
sum(ret_wide_u$`1` > ret_wide_u$`0`, na.rm = TRUE)
t.test(ret_wide_u$`1`, ret_wide_u$`0`, paired = TRUE)

## for not ret

notret_wide_b = tidyr::spread(notret_main_b, TargetAccuracy, Trials)
sum(notret_wide_b$`1` < notret_wide_b$`0`, na.rm = TRUE)
t.test(notret_wide_b$`1`, notret_wide_b$`0`, paired = TRUE)

notret_wide_p = tidyr::spread(notret_main_p, TargetAccuracy, Trials)
sum(notret_wide_p$`1` < notret_wide_p$`0`, na.rm = TRUE)
t.test(notret_wide_p$`1`, notret_wide_p$`0`, paired = TRUE)

notret_wide_r = tidyr::spread(notret_main_r, TargetAccuracy, Trials)
sum(notret_wide_r$`1` < notret_wide_r$`0`, na.rm = TRUE)
t.test(notret_wide_r$`1`, notret_wide_r$`0`, paired = TRUE)

notret_wide_u = tidyr::spread(notret_main_u, TargetAccuracy, Trials)
sum(notret_wide_u$`1` < notret_wide_u$`0`, na.rm = TRUE)
t.test(notret_wide_u$`1`, notret_wide_u$`0`, paired = TRUE)
@


\subsection *{Mean Accuracy}
<<>>=
library(Rmisc)
agg_acc = summarySE(agg_sub_condition, 
                      measurevar = "TargetFirstResp_ACC",
                      groupvars = c("PrimeCondition"))

library(ggplot2)
library(ggthemes)
ggplot(agg_acc, aes(x = PrimeCondition, y = TargetFirstResp_ACC)) + 
 geom_bar(stat = "identity", position = "dodge", width = 0.5, fill = "darkgoldenrod")+
   geom_errorbar(aes(ymin = TargetFirstResp_ACC - ci, ymax = TargetFirstResp_ACC + ci),
                width=.05, position=position_dodge(.5)) +
     theme_few()+
      xlab("PrimeCondition") + ylab("Mean Accuracy") + 
    ggtitle("Mean Accuracy by Prime Condition") 

@
\subsection *{Prime Ret/Not}
\subsubsection *{Proportions by Target Accuracy}

<<>>=
library(Rmisc)
agg_ret_target = summarySE(merged_agg_primeret_all, 
                      measurevar = "ProportionTarget",
                      groupvars = c("TargetAccuracy", "PrimeRetrieved"))

library(ggplot2)
library(ggthemes)
agg_ret_target %>% mutate(TargetAccuracy = factor(TargetAccuracy, 
                                                 levels = unique(TargetAccuracy),
                    labels = c("Incorrect Target", "Correct Target")))%>%
ggplot(aes(x = TargetAccuracy, y = ProportionTarget, 
                    group = PrimeRetrieved, fill = PrimeRetrieved)) + 
 geom_bar(stat = "identity", position = "dodge", width = 0.5)+
   geom_errorbar(aes(ymin = ProportionTarget - ci, ymax = ProportionTarget + ci),
                width=.05, position=position_dodge(.5)) +
     theme_few()+
  scale_fill_hc()+
      xlab("Target Accuracy") + ylab("Mean Proportion of Trials") + 
    ggtitle("Mean Proportion of \nCorrect/Incorrect Trials by Prime Retrieval") 
@

\subsubsection *{Proportions by Prime Accuracy}

<<>>=
library(Rmisc)
agg_ret_prime = summarySE(merged_agg_primeret_all, 
                      measurevar = "ProportionPrime",
                      groupvars = c("TargetAccuracy", "PrimeRetrieved"))

library(ggplot2)
library(ggthemes)
agg_ret_prime %>% mutate(TargetAccuracy = factor(TargetAccuracy, 
                                                 levels = unique(TargetAccuracy),
                    labels = c("Incorrect Target", "Correct Target")))%>%
ggplot(aes(x = PrimeRetrieved, y = ProportionPrime, 
                    group = TargetAccuracy, fill = TargetAccuracy)) + 
 geom_bar(stat = "identity", position = "dodge", width = 0.5)+
   geom_errorbar(aes(ymin = ProportionPrime - ci, ymax = ProportionPrime + ci),
                width=.05, position=position_dodge(.5)) +
     theme_few()+
  scale_fill_wsj()+
      xlab("Prime Retrieval") + ylab("Mean Proportion of Trials") + 
    ggtitle("Mean Proportion of \nCorrect/Incorrect Trials by Prime Retrieval") 
@

\subsubsection *{How Many Subjects}
<<>>=
### HOW MANY SUBJECTS SHOW THIS EFFECT OF PRIME RETRIEVAL?

primeretrieved = merged_agg_primeret_all %>% 
                    filter(PrimeRetrieved == "Retrieved")
primenotretrieved = merged_agg_primeret_all %>% 
                      filter(PrimeRetrieved == "Not Retrieved")

ret_main = primeretrieved[,c(1,3,5)]
ret_wide = tidyr::spread(ret_main, TargetAccuracy, Trials)
sum(ret_wide$`1` > ret_wide$`0`)
t.test(ret_wide$`1`, ret_wide$`0`, paired = TRUE)

notret_main = primenotretrieved[,c(1,3,5)]
notret_wide = tidyr::spread(notret_main, TargetAccuracy, Trials)
sum(notret_wide$`0` > notret_wide$`1`)
t.test(notret_wide$`0`, notret_wide$`1`, paired = TRUE)
@

\section {Prime Demasking Analysis}

<<>>=
library(dplyr)
colnames(PrimeRetrieval) = c("ID", "AgeGroup", "Subject", "Procedure", 
                            "Prime", "Stimuli2", "PrimeCondition",
                            "Trial", "PrimeDefResp", "PrimeFirstResp_ACC", 
                            "PrimeDefRT", "PrimeRespRESP", "PrimeRespRT", 
                            "Target", "TargetDefResp", "Accuracy",  
                            "TargetDefRT", "TargetRespRESP", "TargetRespRT",
                            "State", "StateRT",  
                            "RTrecognisePrime", "RTrecogniseTarget",
                            "PrimeAcc", "MeanAcc")
primewith_firsttrim = subset(PrimeRetrieval, 
                                 PrimeRetrieval$TargetDefRT > 300)

## aggregate per subject all IVs and DVs
meanRT = group_by(primewith_firsttrim, ID) %>%
  summarise_at(vars(TargetDefRT, RTrecognisePrime, RTrecogniseTarget), mean)
colnames(meanRT) = c("Subject", "MeanTargetRT", 
                     "MeanRTrecogPrime", "MeanRTrecogTarget")

sdRT = group_by(primewith_firsttrim, ID) %>%
  summarise_at(vars(TargetDefRT, RTrecognisePrime, RTrecogniseTarget), sd)
colnames(sdRT) = c("Subject", "sdTargetRT", 
                     "sdRTrecogPrime", "sdRTrecogTarget")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
primewith_z = merge(primewith_firsttrim, RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
primewith_z = primewith_z %>% mutate(zTargetRT = 
                                        (TargetDefRT - MeanTargetRT)/sdTargetRT,
                                           zPrimeRecogRT = 
                                             (RTrecognisePrime - 
                                                MeanRTrecogPrime)/sdRTrecogPrime,
                                           zTargetRecogRT = 
                                             (RTrecogniseTarget - 
                                                MeanRTrecogTarget)/sdRTrecogTarget)
                 
## checking: subject level means should be zero

sub_pic = group_by(primewith_z, Subject) %>%
  summarise_at(vars(zTargetRT,zPrimeRecogRT, zTargetRecogRT), mean)

@

\section {Trimming z-RTs}

<<>>=

#Note: We are trimming based on PrimeRecog RT because that's the RT we care about most
primewith_z_trimmed = subset(primewith_z, 
                                primewith_z$zPrimeRecogRT < 3 & 
                                  primewith_z$zPrimeRecogRT > -3)
@

\section {Repeating z-scoring}

<<>>=
## aggregate per subject all IVs and DVs
meanRT = group_by(primewith_z_trimmed, ID) %>%
  summarise_at(vars(TargetRT, RTrecognisePrime, RTrecogniseTarget), mean)
colnames(meanRT) = c("Subject", "MeanTargetRT_trim", 
                     "MeanRTrecogPrime_trim", "MeanRTrecogTarget_trim")

sdRT = group_by(primewith_z_trimmed, ID) %>%
  summarise_at(vars(TargetRT, RTrecognisePrime, RTrecogniseTarget), sd)
colnames(sdRT) = c("Subject", "sdTargetRT_trim", 
                     "sdRTrecogPrime_trim", "sdRTrecogTarget_trim")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
primewith_final_z = merge(primewith_z_trimmed, 
                             RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
primewith_final_z = primewith_final_z %>% mutate(zTargetRT_trim = 
                                             (TargetDefRT - 
                                                MeanTargetRT_trim)/sdTargetRT_trim,
                                           zPrimeRecogRT_trim = 
                                             (RTrecognisePrime - 
                                      MeanRTrecogPrime_trim)/sdRTrecogPrime_trim,
                                           zTargetRecogRT_trim = 
                                             (RTrecogniseTarget - 
                                      MeanRTrecogTarget_trim)/sdRTrecogTarget_trim)
                 
## checking: subject level means should be zero

sub_pic = group_by(primewith_final_z, Subject) %>%
  summarise_at(vars(zTargetRT_trim,zPrimeRecogRT_trim, zTargetRecogRT_trim), mean)

@
\section {Linear Models}

<<>>=
# Mean RT to retrieve Target as a function of Prime Condition

# Effect of RT prime on Accuracy
library(lme4)
RTprime_acc_model = glmer(data = primewith_final_z, 
                          Accuracy ~ zPrimeRecogRT_trim + 
                            (1|Subject), family = binomial )
summary(RTprime_acc_model)
library(sjPlot)
sjp.glmer(RTprime_acc_model, type = "pred", vars = "zPrimeRecogRT_trim")

contrasts(primewith_final_z$PrimeCondition) = contr.treatment(n = 4)


RTprime_acc_model_2 = glmer(data = primewith_final_z, 
                          Accuracy ~ zPrimeRecogRT_trim*PrimeCondition + 
                            (1|Subject), family = binomial )
summary(RTprime_acc_model_2)

RTprime_acc_model_3 = glmer(data = primewith_final_z, 
                          Accuracy ~ zPrimeRecogRT_trim*PrimeAcc + 
                            (1|Subject), family = binomial )
summary(RTprime_acc_model_3)


@

\section {Plotting Model Fits}
\subsection {Model 1}
<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)
fixed.frame <- 
  data.frame(expand.grid(zPrimeRecogRT_trim = seq(-3,3,0.5)))%>%
  mutate(pred = predict(RTprime_acc_model, newdata = ., re.form = NA))

fixed.frame %>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = pred)) +
    geom_line(size = 1, color = "blue") + 
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Model Fit: Target Accuracy by Prime Demasking RT")+
theme_few() +
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@

\subsection {Model 2}
<<fig=TRUE>>=
fixed.frame <- 
  data.frame(expand.grid(zPrimeRecogRT_trim = seq(-3,3,0.5),
                         PrimeCondition = c("B", "P", "R", "U")))%>%
  mutate(pred = predict(RTprime_acc_model_3, newdata = ., re.form = NA))

fixed.frame %>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = pred, color = PrimeCondition)) +
    geom_line(size = 1) + 
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Model Fit: Target Accuracy by Prime Demasking RT")+
theme_few() +
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@
\end{document}