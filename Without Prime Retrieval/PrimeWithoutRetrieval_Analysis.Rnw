\documentclass[a4paper]{article}
\usepackage{Sweave}
\usepackage{fixltx2e}

\usepackage[margin=1.0in]{geometry}

 \DefineVerbatimEnvironment{Sinput}{Verbatim} { frame = lines, fontshape = sl}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{frame=lines, fontshape = sl}

\title{Prime Without Retrieval: Analysis}
\author{Abhilasha Kumar}
<<echo=FALSE>>=
options(width=60)
library(xtable)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(tidyr)
library(sjPlot)
library(dplyr)
@

\begin{document}
\SweaveOpts{concordance=TRUE}
 \maketitle

\section {Reading the file}

First read the file into an object. If you already have the object, then you don't need to worry about this step:

<<>>=
prime_without = read.csv("CompiledSubjects_FINAL.csv", header = TRUE, sep = ",")
@

\section {Target Accuracy}

<<>>=
library(dplyr)
overall_acc = group_by(prime_without) %>%
  summarise_at(vars(TargetFirstResponseAccuracy), mean)

prime_acc = group_by(prime_without, PrimeCondition) %>%
  summarise_at(vars(TargetFirstResponseAccuracy), mean)

prime_subject_acc = group_by(prime_without, Subject, PrimeCondition) %>%
  summarise_at(vars(TargetFirstResponseAccuracy), mean)

prime_subject_acc$PrimeCondition = as.factor(prime_subject_acc$PrimeCondition)
prime_subject_acc$Subject = as.factor(prime_subject_acc$Subject)

target_aov= aov(data = prime_subject_acc,
                TargetFirstResponseAccuracy ~ PrimeCondition +
                                 Error(Subject/PrimeCondition))
summary(target_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
imm_lsm = lsmeans::lsmeans(target_aov, c("PrimeCondition"))
prime_effect = cld(imm_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.6 ))
@

Next, we calculate mean number of states at different levels. Print each object out to see what it contains.  

<<>>=
meanstates = group_by(prime_without, TargetQuestion.RESP.Trial.)%>%
    summarise(count = n())

meanstates_persubject = group_by(prime_without, Subject, TargetQuestion.RESP.Trial.)%>%
    summarise(count = n())

meanstates_prime =  group_by(prime_without, PrimeCondition, TargetQuestion.RESP.Trial.)%>%
    summarise(count = n())

meanstates_persubject_prime =  group_by(prime_without, Subject, PrimeCondition, 
                                        TargetQuestion.RESP.Trial.)%>%
    summarise(count = n())

@

\section {Plotting States per Prime Condition}

First, we make some changes to our variable and condition names so that they are easy to plot:
<<>>=

colnames(meanstates_prime) = c("PrimeCondition", "State", "Count")
colnames(meanstates_persubject_prime) = c("Subject", "PrimeCondition", "State", "Count")

meanstates_prime$State = as.factor(meanstates_prime$State)
meanstates_prime$State = sub("1", "1_Know", meanstates_prime$State)
meanstates_prime$State = sub("2", "2_DontKnow", meanstates_prime$State)
meanstates_prime$State = sub("3", "3_Other", meanstates_prime$State)
meanstates_prime$State = sub("4", "4_TOT", meanstates_prime$State)
@

Next, we plot the mean number of states per prime condition. We use the group() argument in ggplot to do this:

<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)
ggplot(meanstates_prime, aes(x = PrimeCondition, y = Count, fill = State, 
                             group = State))+
 geom_bar(stat = "identity", position = "dodge", width = 0.5)+
 theme_few()+
  xlab("Prime Condition") + ylab("Mean Accuracy") + 
  ggtitle("Number of States by Prime Condition")
@

%\section {ANOVA on States}

<<echo=FALSE>>=
meanstates_persubject_prime[47, ] = c("3", "R", "4", 0)
meanstates_persubject_prime[48, ] = c("3", "B", "4", 0)

meanstates_persubject_prime$Subject = as.factor(meanstates_persubject_prime$Subject)
meanstates_persubject_prime$PrimeCondition = as.factor(meanstates_persubject_prime$PrimeCondition)
meanstates_persubject_prime$State = as.factor(meanstates_persubject_prime$State)

states_aov = aov(data = meanstates_persubject_prime, Count ~ PrimeCondition*State +
                                        Error(Subject/(PrimeCondition*State)))
#summary(states_aov)
                 
@

<<echo=FALSE>>=
prime_without = read.csv("CompiledSubjects_FINAL.csv", header = TRUE, sep = ",")
library(dplyr)
agg_prime = group_by(prime_without, PrimeCondition)%>%
    summarise_each(funs(mean(., na.rm = TRUE)), TargetFirstResponseAccuracy, 
                                        RTrecognisePrime, RTrecogniseTarget )

agg_sub_prime = group_by(prime_without,Subject, PrimeCondition)%>%
    summarise_each(funs(mean(., na.rm = TRUE)), TargetFirstResponseAccuracy, 
                                        RTrecognisePrime, RTrecogniseTarget )
@

\section {z-scoring RTs}
\subsection*{RT prime and Target}

<<>>=
library(dplyr)
colnames(prime_without) = c("Subject", "Session", "Trial", "Prime", "PrimeResp",
                            "PrimeRespRT", "Target", "TargetDefResp", "TargetRT",
                            "State", "StateRT", "TargetResp", "TargetRespRT",
                            "PrimeAcc", "Accuracy", "PrimeCondition", 
                            "RTrecognisePrime", "RTrecogniseTarget")
prime_without_firsttrim = subset(prime_without, 
                                 prime_without$TargetRT > 300)

## aggregate per subject all IVs and DVs
meanRT = group_by(prime_without_firsttrim, Subject) %>%
  summarise_at(vars(TargetRT, RTrecognisePrime, RTrecogniseTarget), mean)
colnames(meanRT) = c("Subject", "MeanTargetRT", 
                     "MeanRTrecogPrime", "MeanRTrecogTarget")

sdRT = group_by(prime_without_firsttrim, Subject) %>%
  summarise_at(vars(TargetRT, RTrecognisePrime, RTrecogniseTarget), sd)
colnames(sdRT) = c("Subject", "sdTargetRT", 
                     "sdRTrecogPrime", "sdRTrecogTarget")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
primewithout_z = merge(prime_without_firsttrim, RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
primewithout_z = primewithout_z %>% mutate(zTargetRT = 
                                             (TargetRT - MeanTargetRT)/sdTargetRT,
                                           zPrimeRecogRT = 
                                             (RTrecognisePrime - 
                                                MeanRTrecogPrime)/sdRTrecogPrime,
                                           zTargetRecogRT = 
                                             (RTrecogniseTarget - 
                                                MeanRTrecogTarget)/sdRTrecogTarget)
                 
## checking: subject level means should be zero

sub_pic = group_by(primewithout_z, Subject) %>%
  summarise_at(vars(zTargetRT,zPrimeRecogRT, zTargetRecogRT), mean)

@

\section{RT distributions}

\subsection *{RT to Demask Prime}

<<>>=

## RT to demask prime
ggplot(primewithout_z, aes(x = RTrecognisePrime))+
 geom_histogram(binwidth = 500, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("RT to recognise Prime") + ylab("Count") + 
ggtitle("Raw RT to Recognize Prime")

ggplot(primewithout_z, aes(x = zPrimeRecogRT))+
 geom_histogram(binwidth = 0.2, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("z-RT to recognise Prime") + ylab("Count") + 
ggtitle("z-RT to Recognize Prime")
@

\subsection *{RT to Retrieve Target}
<<>>=
## RT to retrieve target
ggplot(primewithout_z, aes(x = TargetRT))+
 geom_histogram(binwidth = 100, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("RT to Retrieve Target (ms)") + ylab("Count") + 
ggtitle("Raw RT to Retrieve Target")

ggplot(primewithout_z, aes(x = zTargetRT))+
 geom_histogram(binwidth = 0.1, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("z-RT to Retrieve Target") + ylab("Count") + 
ggtitle("z-RT to Retrieve Target")

@

\subsectin *{RT to Demask Target}

<<>>=
## RT to demask target
ggplot(primewithout_z, aes(x = RTrecogniseTarget))+
 geom_histogram(binwidth = 200, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("RT to Retrieve Target (ms)") + ylab("Count") + 
ggtitle("Raw RT to Recognize Target")

ggplot(primewithout_z, aes(x = zTargetRecogRT))+
 geom_histogram(binwidth = 0.1, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("z-RT to Retrieve Target") + ylab("Count") + 
ggtitle("z-RT to Recognize Target")

@

\section {Trimming z-RTs}

<<>>=

#Note: We are trimming based on PrimeRecog RT because that's the RT we care about most
primewithout_z_trimmed_prime = subset(primewithout_z, 
                                primewithout_z$zPrimeRecogRT < 3 & 
                                  primewithout_z$zPrimeRecogRT > -3)

primewithout_z_trimmed_target = subset(primewithout_z, 
                                primewithout_z$zTargetRecogRT < 3 & 
                                  primewithout_z$zTargetRecogRT > -3)
@

\section {Repeating z-scoring}

\subsection{For prime}

<<>>=
## aggregate per subject all IVs and DVs
meanRT_prime = group_by(primewithout_z_trimmed_prime, Subject) %>%
  summarise_at(vars(TargetRT, RTrecognisePrime), mean)
colnames(meanRT_prime) = c("Subject", "MeanTargetRT_trim", 
                     "MeanRTrecogPrime_trim")

sdRT_prime = group_by(primewithout_z_trimmed_prime, Subject) %>%
  summarise_at(vars(TargetRT, RTrecognisePrime), sd)
colnames(sdRT_prime) = c("Subject", "sdTargetRT_trim", 
                     "sdRTrecogPrime_trim")

RT_agg_prime = merge(meanRT_prime, sdRT_prime, by = "Subject")

## merge aggregate info with long data
primewithout_final_z_prime = merge(primewithout_z_trimmed_prime, 
                             RT_agg_prime, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
primewithout_final_z_prime = primewithout_final_z_prime %>% 
                                  mutate(zTargetRT_trim = 
                                             (TargetRT - 
                                                MeanTargetRT_trim)/sdTargetRT_trim,
                                           zPrimeRecogRT_trim = 
                                             (RTrecognisePrime - 
                                      MeanRTrecogPrime_trim)/sdRTrecogPrime_trim)
                 
## checking: subject level means should be zero

sub_pic = group_by(primewithout_final_z_prime, Subject) %>%
  summarise_at(vars(zTargetRT_trim,zPrimeRecogRT_trim), mean)

@

\subsection{For Target}

<<>>=
## aggregate per subject all IVs and DVs
meanRT_target = group_by(primewithout_z_trimmed_target, Subject) %>%
  summarise_at(vars(TargetRT, RTrecogniseTarget), mean)
colnames(meanRT_target) = c("Subject", "MeanTargetRT_trim", 
                     "MeanRTrecogTarget_trim")

sdRT_target = group_by(primewithout_z_trimmed_target, Subject) %>%
  summarise_at(vars(TargetRT, RTrecogniseTarget), sd)
colnames(sdRT_target) = c("Subject", "sdTargetRT_trim", 
                      "sdRTrecogTarget_trim")

RT_agg_target = merge(meanRT_target, sdRT_target, by = "Subject")

## merge aggregate info with long data
primewithout_final_z_target = merge(primewithout_z_trimmed_target, 
                             RT_agg_target, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
primewithout_final_z_target = primewithout_final_z_target %>% 
                                  mutate(zTargetRT_trim = 
                                             (TargetRT - 
                                                MeanTargetRT_trim)/sdTargetRT_trim,
                                           zTargetRecogRT_trim = 
                                             (RTrecogniseTarget - 
                                      MeanRTrecogTarget_trim)/sdRTrecogTarget_trim)
                 
## checking: subject level means should be zero

sub_pic = group_by(primewithout_final_z_target, Subject) %>%
  summarise_at(vars(zTargetRT_trim, zTargetRecogRT_trim), mean)

@

\subsection {Combining z-RT Prime and Target }

<<>>=
## now we have separately z-scored RTprime and RTtarget. Need to combine.
## taking only necessary columns
primewithout_final_z_prime = primewithout_final_z_prime[,c(1,3,33)]

primewithout_final_z = merge(primewithout_final_z_target, 
                             primewithout_final_z_prime, 
                             by  = c("Subject", "Trial"))
@

\section {Final RT distributions}
<<>>=
ggplot(primewithout_final_z, aes(x = zPrimeRecogRT_trim))+
 geom_histogram(binwidth = 0.2, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("z-RT to recognise Prime") + ylab("Count") + 
ggtitle("z-RT to Recognize Prime")

ggplot(primewithout_final_z, aes(x = zTargetRT_trim))+
 geom_histogram(binwidth = 0.2, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("z-RT to recognise Target") + ylab("Count") + 
ggtitle("z-RT to Recognize Target")

ggplot(primewithout_final_z, aes(x = zTargetRecogRT_trim))+
 geom_histogram(binwidth = 0.2, color = "gray26", fill = "goldenrod")+
 theme_few()+
 xlab("z-RT to Retrieve Target") + ylab("Count") + 
ggtitle("z-RT to Retrieve Target")

@

\section {Plots}

\subsection {Target Accuracy}
<<>>=
target_rmisc = Rmisc::summarySE(prime_subject_acc, 
                      measurevar = "TargetFirstResponseAccuracy",
                      groupvars = c("PrimeCondition"))
library(ggplot2)
library(ggthemes)
target_rmisc %>% mutate(PrimeType = factor(PrimeCondition, 
                                levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = TargetFirstResponseAccuracy))+
 geom_bar(stat = "identity", position = "dodge", 
          width = 0.5, color = "black", fill = "royalblue4")+
   geom_errorbar(aes(ymin=TargetFirstResponseAccuracy - ci, 
                     ymax=TargetFirstResponseAccuracy + ci), 
             width=.1, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   xlab("Prime Condition") + ylab("Mean Target Retrieval Accuracy") + 
  ggtitle("")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\section {Linear Models}

<<>>=
# Mean RT to retrieve Target as a function of Prime Condition

# Effect of RT prime on Accuracy
library(lme4)
RTprime_acc_model = glmer(data = primewithout_final_z, 
                          Accuracy ~ zPrimeRecogRT_trim + 
                            (1|Subject) + (1|Target), family = binomial )
summary(RTprime_acc_model)

contrasts(primewithout_final_z$PrimeCondition) = contr.treatment(n = 4,
                                                                 base = 3)


RTprime_acc_model_3 = glmer(data = primewithout_final_z, 
                          Accuracy ~ zPrimeRecogRT_trim*PrimeCondition + 
                            (1|Subject), family = binomial )
summary(RTprime_acc_model_3)
car::Anova(RTprime_acc_model_3)
@

\section {Plotting Model Fits}
\subsection {Model 1}
<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)
mainplot = primewithout_final_z %>%
  ggplot(aes(x =zPrimeRecogRT_trim , y = Accuracy, 
             group = factor(Subject))) +
  geom_smooth(method = "lm", se = FALSE, color = "darkolivegreen4", size = 0.5)+
  guides(color = FALSE)+
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Raw Data: Target Accuracy by Prime Demasking RT")+
theme_few() +
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
mainplot + stat_smooth(aes(group = 1), method = "lm", color = "red")
@

\subsection {Model 2}
<<fig=TRUE>>=
fixed.frame <- 
  data.frame(expand.grid(zPrimeRecogRT_trim = seq(-3,3,0.5),
                         PrimeCondition = c("B", "P", "R", "U")))%>%
  mutate(pred = predict(RTprime_acc_model_3, newdata = ., re.form = NA))

fixed.frame %>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = pred, color = PrimeCondition)) +
    geom_line(size = 1) + 
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Model Fit: Target Accuracy by Prime Demasking RT")+
theme_few() +
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@

\subsection {Model 2: Raw data}
<<fig=TRUE>>=

primeplot = primewithout_final_z %>%
  mutate(PrimeType = factor(PrimeCondition, 
                    levels = unique(PrimeCondition),
                    labels = c("Both Prime", "Phonological Prime", 
                               "Semantic Prime", "Unrelated Prime")))%>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = Accuracy, 
             group = factor(Subject))) +
  geom_smooth(method = "lm", se = FALSE, color = "darkolivegreen4", size = 0.5)+
  facet_wrap(~PrimeType)+
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Target Retrieval Accuracy by \nPrime Demasking RT & Prime Condition")+
theme_hc() +
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
                   strip.text.x = element_text(face = "bold", size = rel(1.4)),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))

primeplot + stat_smooth(aes(group = PrimeCondition), method = "lm", color = "red")
@

\subsection {Model 2: Raw data: No subject lines}
<<fig=TRUE>>=

primewithout_final_z %>%
  mutate(PrimeType = factor(PrimeCondition, 
                    levels = unique(PrimeCondition),
                    labels = c("Both Prime", "Phonological Prime", 
                               "Semantic Prime", "Unrelated Prime")))%>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = Accuracy, 
             group = PrimeCondition, color = PrimeCondition)) +
  geom_smooth(method = "lm", se = FALSE, size = 1)+
  facet_wrap(~PrimeCondition, nrow = 2)+
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("")+
theme_hc() +
scale_color_manual(values = c( "darkorange1", "red",
                              "dodgerblue3", "springgreen3"))+
theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_blank(),
          legend.text = element_blank(),
          legend.key = element_blank(),
    strip.text.x = element_text(face = "bold", size = rel(1.4)),
    plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@

\subsection {Raw Data}

<<>>=
 ggplot(prime_without, aes(x = RTrecognisePrime, 
                           y = Accuracy)) +
  geom_point(color = "pink")+
    geom_smooth(method = "lm") + 
    xlab("Raw RT to Demask Prime") + ylab ("Target Accuracy")+ 
  ggtitle("Model Fit: Target Accuracy by Prime Demasking RT")+
theme_few() +
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@

\section {Target DemaskingRT}

<<>>=
library(lme4)
contrasts(primewithout_final_z$PrimeCondition) = contr.treatment(n = 4, base = 1)

RTprime_RT_model_1 = lmer(data = primewithout_final_z, 
                    zTargetRecogRT_trim ~ PrimeCondition + 
                            (1|Subject) + (1|Target))
summary(RTprime_RT_model_1)
car::Anova(RTprime_RT_model_1)

RTprime_RT_model_2 = lmer(data = primewithout_final_z, 
                    zTargetRecogRT_trim ~ PrimeCondition*zPrimeRecogRT_trim + 
                            (1|Subject) + (1|Target))
summary(RTprime_RT_model_2)
car::Anova(RTprime_RT_model_2)

# conditional on targetacc
RTprime_RT_model_3 = lmer(data = primewithout_final_z, 
        zTargetRecogRT_trim ~ PrimeCondition*zPrimeRecogRT_trim*Accuracy + 
                            (1|Subject) + (1|Target))
summary(RTprime_RT_model_3)
car::Anova(RTprime_RT_model_3)

@

\subsection {Target RT Model}
<<fig=TRUE>>=

primewithout_final_z %>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = zTargetRecogRT_trim, 
             group = PrimeCondition, color = PrimeCondition)) +
  geom_smooth(method = "lm", se = FALSE, size = 1)+
  facet_wrap(~PrimeCondition, nrow = 2)+
    xlab("z-RT to Demask Prime") + ylab ("z-RT to Demask Target")+ 
  ggtitle("")+
theme_hc() +
scale_color_manual(values = c( "darkorange1", "red",
                              "dodgerblue3", "springgreen3"))+
theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_blank(),
          legend.text = element_blank(),
          legend.key = element_blank(),
    strip.text.x = element_text(face = "bold", size = rel(1.4)),
    plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@


\section {Median Split Prime Demasking RT}

<<>>=
## final zRT in primewithoutout_z_final: We perform a median split on 
## zPrimeRecogRT: into slow and fast, and look at Target Accuracy as a function 
## of that to see if our plot matches YA data from prime retrieval study

## aggregate per subject all IVs and DVs
medianRT = group_by(primewithoutout_final_z, Subject) %>%
  summarise_at(vars(zPrimeRecogRT_trim), median)
colnames(medianRT) = c("Subject", "MedianPrimeRecogRT")

primewithoutout_final_z = merge(primewithoutout_final_z, medianRT, by = "Subject")

primewithoutout_final_z = primewithoutout_final_z %>% 
 mutate(PrimeDemask = factor(primewithoutout_final_z$zPrimeRecogRT_trim >
                               MedianPrimeRecogRT))

mediansplit = group_by(primewithoutout_final_z, Subject, PrimeDemask, Accuracy) %>%
  summarize(Trials = n())

primefastslow = group_by(primewithoutout_final_z, Subject, PrimeDemask) %>%
  summarize(PrimeRT = n())

median_merge = merge(mediansplit, primefastslow, by = c("Subject", "PrimeDemask"))
median_merge$PrimeProportion = median_merge$Trials/median_merge$PrimeRT

agg_demask = Rmisc::summarySE(median_merge, 
                      measurevar = "PrimeProportion",
                      groupvars = c("PrimeDemask", 
                                    "Accuracy"))

library(ggplot2)
library(ggthemes)
agg_demask %>% mutate(TargetAccuracy = factor(Accuracy, 
                                      levels = unique(Accuracy),
                    labels = c("Incorrect Target", "Correct Target")),
                    PrimeDemaskRT = factor(PrimeDemask, 
                                           levels = unique(PrimeDemask),
                                           labels = c("Fast RT", "Slow RT")))%>%
  ggplot(aes(x = PrimeDemaskRT, y = PrimeProportion, 
                          group = TargetAccuracy, 
                          fill = TargetAccuracy)) +  
  geom_bar(stat = "identity", position = "dodge", width = 0.5)+
   geom_errorbar(aes(ymin = PrimeProportion - ci, ymax = PrimeProportion + ci),
                width=.05, position=position_dodge(.5)) +
  theme_few()+
    scale_fill_wsj()+
      xlab("Prime Demasking RT") + ylab("Mean Proportion of Trials") + 
    ggtitle("Mean Proportion of Correct/Incorrect \nTrials by Prime Demasking RT")
@

\end{document}